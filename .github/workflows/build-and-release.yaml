name: Build and Release

on:
  push:
    paths:
      - "**.c"
      - "**.h"
      - "**.feature"
      - "Kconfig"
      - ".github/workflows/build-and-release.yaml"
      - "Dockerfile"
      - "west.yml"
      - "*.conf"
  repository_dispatch:
    types:
      - source-update
  workflow_dispatch:

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  CR_PAT: ${{ secrets.CR_PAT }}
  AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
  LOCATION: ${{ secrets.LOCATION }}
  APP_NAME: ${{ secrets.APP_NAME }}
  RESOURCE_GROUP: ${{ secrets.RESOURCE_GROUP }}
  AZURE_IOT_HUB_DPS_ID_SCOPE: ${{ secrets.AZURE_IOT_HUB_DPS_ID_SCOPE }}
  SUPL_CLIENT_LIB_DOWNLOAD: ${{ secrets.SUPL_CLIENT_LIB_DOWNLOAD }}
  CI: 1
  FORCE_COLOR: 3

jobs:
  # This generates a unique build id (which is also different for re-runs) to
  # be used in the artifact names to be able to distinguish them when
  # downloading the artifact files.
  build-id:
    name: Generate build ID
    runs-on: ubuntu-latest
    outputs:
      id: ${{ steps.id.outputs.id }}
    steps:
      - name: Generate build ID
        id: id
        run: |
          ID=`uuidgen`
          echo "::set-output name=id::${ID}"

  docker:
    name: Prepare Docker image
    runs-on: ubuntu-latest
    outputs:
      docker-image: ${{ steps.docker-image-tag.outputs.docker-image }}
    steps:
      - uses: actions/checkout@v2

      - name: Login to GHCR
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.CR_PAT }}

      - name: Determine Docker image name and tag
        id: docker-image-tag
        run: |
          DOCKER_REPO_NAME=`echo ${GITHUB_REPOSITORY} | tr '[:upper:]' '[:lower:]'`
          cat Dockerfile west.yml > .docker-checksum
          echo $SUPL_CLIENT_LIB_DOWNLOAD >> .docker-checksum
          DOCKER_CHECKSUM=`sha256sum .docker-checksum | awk '{ print $1 }' | tr -d '\n'`
          DOCKER_IMAGE=ghcr.io/${DOCKER_REPO_NAME}-builder:${DOCKER_CHECKSUM}
          echo "::set-output name=docker-image::${DOCKER_IMAGE}"
          echo "DOCKER_IMAGE=${DOCKER_IMAGE}" >> $GITHUB_ENV

      - name: Check if Docker image exists
        id: check-docker-image
        continue-on-error: true
        env:
          DOCKER_CLI_EXPERIMENTAL: enabled
        run: docker manifest inspect ${{ env.DOCKER_IMAGE }}

      - name: Build Docker image
        if: steps.check-docker-image.outcome == 'failure'
        uses: docker/build-push-action@v2
        with:
          build-args: |
            SUPL_CLIENT_LIB_DOWNLOAD
          context: .
          tags: ${{ env.DOCKER_IMAGE }}
          push: true

  release-version:
    name: Determine next release version

    runs-on: ubuntu-latest

    outputs:
      nextRelease: ${{ steps.version.outputs.nextRelease }}

    steps:
      - uses: actions/checkout@v2

      - name: Determine next release version
        uses: nordicsemiconductor/cloud-get-next-version-action@saga
        id: version
        with:
          branch: saga
          defaultVersion: "0.0.0-development"

      - run: echo ${{ steps.version.outputs.nextRelease }}

  build:
    runs-on: ubuntu-latest

    needs: [docker, release-version]

    strategy:
      matrix:
        board: [thingy91_nrf9160ns, nrf9160dk_nrf9160ns]
        network: [nbiot, ltem]
        loglevel: [debug, nodebug]

    steps:
      - uses: actions/checkout@v2

      - name: Disable nRF Connect for Cloud backend
        run: |
          sed -i 's/CONFIG_NRF_CLOUD/# CONFIG_NRF_CLOUD/' prj.conf
          sed -i 's/CONFIG_AGPS_SRC_NRF_CLOUD=/# CONFIG_AGPS_SRC_NRF_CLOUD=/' prj.conf
          sed -i 's/CONFIG_GPS_MODULE_NMEA=/# CONFIG_GPS_MODULE_NMEA=/' prj.conf
          sed -i 's/CONFIG_NRF_CLOUD/# CONFIG_NRF_CLOUD/' overlay-debug.conf

      - name: Configure asset_tracker_v2 for Azure
        run: |
          sed -i 's/# CONFIG_AZURE_/CONFIG_AZURE_/' prj.conf
          sed -i 's/# CONFIG_AZURE_/CONFIG_AZURE_/' overlay-debug.conf

      - name: Configure Version
        run: |
          APP_VERSION=${{ needs.release-version.outputs.nextRelease }}-${{ matrix.board }}-${{ matrix.network }}-${{ matrix.loglevel }}
          echo "CONFIG_ASSET_TRACKER_V2_APP_VERSION=\"${APP_VERSION}\"" >> prj.conf

      - name: Enable debug logs
        if: matrix.loglevel == 'debug'
        run: echo "CONFIG_LOG_MAX_LEVEL=4" >> prj.conf

      - name: Set network mode to NB-IoT
        if: matrix.network == 'nbiot'
        run: |
          echo "# Set network mode to NB-IoT" >> prj.conf
          echo "CONFIG_LTE_NETWORK_MODE_NBIOT_GPS=y" >> prj.conf
          sed -i 's/CONFIG_LTE_NETWORK_MODE_LTE_M_GPS=/# CONFIG_LTE_NETWORK_MODE_LTE_M_GPS=/' prj.conf

      - name: Configure the Azure IoT DPS ID scope
        run: |
          sed -i "s/CONFIG_AZURE_IOT_HUB_DPS_ID_SCOPE=\"\"/CONFIG_AZURE_IOT_HUB_DPS_ID_SCOPE=\"${AZURE_IOT_HUB_DPS_ID_SCOPE}\"/" prj.conf

      - name: Enable A-GPS with SUPL client
        if: env.SUPL_CLIENT_LIB_DOWNLOAD != ''
        run: |
          echo "CONFIG_SUPL_CLIENT_LIB=y" >> prj.conf
          echo "CONFIG_AGPS=y" >> prj.conf
          echo "CONFIG_AGPS_SRC_SUPL=y" >> prj.conf

      - name: Disable A-GPS
        if: env.SUPL_CLIENT_LIB_DOWNLOAD == ''
        run: |
          sed -i 's/CONFIG_AGPS=/# CONFIG_AGPS=/' prj.conf
          sed -i 's/CONFIG_AGPS=/# CONFIG_AGPS=/' overlay-debug.conf

      - run: cat prj.conf
      - run: cat overlay-debug.conf

      - name: Login to GHCR
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.CR_PAT }}

      - name: Pull Docker image
        run: docker pull ${{ needs.docker.outputs.docker-image }}

      - name: Build with debug enabled
        if: matrix.loglevel == 'debug'
        run: |
          docker run --rm -v ${PWD}:/workdir/ncs/firmware ${{ needs.docker.outputs.docker-image }} /bin/bash -c 'cd ncs/firmware && west update && west build -p always -b ${{ matrix.board }} -- -DOVERLAY_CONFIG="overlay-debug.conf;asset-tracker-cloud-firmware-azure.conf" -DEXTRA_CFLAGS="-Werror=format-truncation"'

      - name: Build with debug disabled
        if: matrix.loglevel != 'debug'
        run: |
          docker run --rm -v ${PWD}:/workdir/ncs/firmware ${{ needs.docker.outputs.docker-image }} /bin/bash -c 'cd ncs/firmware && west update && west build -p always -b ${{ matrix.board }} -- -DOVERLAY_CONFIG=asset-tracker-cloud-firmware-azure.conf -DEXTRA_CFLAGS="-Werror=format-truncation"'

      - name: Copy firmware
        run: |
          cp build/zephyr/merged.hex ./
          cp build/zephyr/app_update.bin ./

      - uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.board }}-${{ matrix.network }}-${{ matrix.loglevel }}
          path: |
            merged.hex
            app_update.bin
            prj.conf
            overlay-debug.conf

  e2e-credentials:
    name: Create device credentials for end-to-end test
    runs-on: ubuntu-latest

    needs: [build-id]

    strategy:
      matrix:
        board: [nrf9160dk_nrf9160ns]
        network: [ltem]

    steps:
      - name: Generate device ID
        run: |
          DEVICE_ID=`uuidgen | cut -d- -f1`
          echo "DEVICE_ID=${DEVICE_ID}" >> $GITHUB_ENV

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: List Azure accounts
        run: az account list --output table

      - uses: actions/setup-node@v2
        with:
          node-version: "15.x"

      - uses: actions/checkout@v2

      - name: Clone nRF Asset Tracker for Azure
        run: |
          git clone `cat package.json | jq -r '.cloud.repository'` cloud

      - name: Install dependencies
        run: |
          cd cloud
          npm ci

      - name: Compile TypeScript
        run: |
          cd cloud
          npx tsc

      - name: Keep CA certificates around
        uses: actions/cache@v2
        with:
          path: cloud/certificates
          key: certificates

      - name: Check if intermediate cert exists
        run: |
          ls ./cloud/certificates/*/CA.intermediate.* 1> /dev/null 2>&1
          echo "SKIP_CERT_GENERATION=1" >> $GITHUB_ENV
        continue-on-error: true

      - name: Create Intermediate CA certificate
        if: env.SKIP_CERT_GENERATION != '1'
        run: |
          cd cloud  
          node cli create-ca-root
          node cli proof-ca-root-possession
          node cli create-ca-intermediate

      - name: Create device credentials
        run: |
          cd cloud
          node cli create-device-cert -d ${{ env.DEVICE_ID }}

      - name: Copy credentials
        run: |
          mkdir e2e-credentials
          cp cloud/certificates/*/device-${{ env.DEVICE_ID }}* e2e-credentials

      - uses: actions/upload-artifact@v2
        with:
          name:
            e2e-credentials-${{ matrix.board }}-${{ matrix.network }}-${{
            needs.build-id.outputs.id }}
          path: |
            e2e-credentials/*

      - name: Remove device certificates
        run: rm -vf ./cloud/certificates/*/device*

  e2e-firmware:
    name: Build firmware for end-to-end test
    runs-on: ubuntu-latest

    needs: [e2e-credentials, docker, build-id]

    strategy:
      matrix:
        board: [nrf9160dk_nrf9160ns]
        network: [ltem]

    steps:
      - uses: actions/checkout@v2

      - uses: actions/download-artifact@v2
        with:
          name:
            e2e-credentials-${{ matrix.board }}-${{ matrix.network }}-${{
            needs.build-id.outputs.id }}
          path: e2e-credentials

      - name: Set device id
        run: |
          echo "DEVICE_ID=`find e2e-credentials -name \*.json | head -n 1 | xargs cat | jq -r '.clientId'`" >> $GITHUB_ENV

      - name: Configure Version
        id: configure-version
        env:
          APP_VERSION:
            ${{ github.sha }}-${{ matrix.board }}-${{ matrix.network }}-${{
            env.DEVICE_ID }}
        run: |
          echo "CONFIG_ASSET_TRACKER_V2_APP_VERSION=\"${APP_VERSION}-original\"" >> prj.conf

      - name: Disable nRF Connect for Cloud backend
        run: |
          sed -i 's/CONFIG_NRF_CLOUD/# CONFIG_NRF_CLOUD/' prj.conf
          sed -i 's/CONFIG_AGPS/# CONFIG_AGPS/' prj.conf
          sed -i 's/CONFIG_GPS_MODULE_NMEA=/# CONFIG_GPS_MODULE_NMEA=/' prj.conf
          sed -i 's/CONFIG_NRF_CLOUD/# CONFIG_NRF_CLOUD/' overlay-debug.conf

      - name: Configure asset_tracker_v2 for Azure
        run: |
          sed -i 's/# CONFIG_AZURE_/CONFIG_AZURE_/' prj.conf
          sed -i 's/# CONFIG_AZURE_/CONFIG_AZURE_/' overlay-debug.conf

      - name: Lower GPS timeout
        run: echo "CONFIG_DATA_GPS_TIMEOUT_SECONDS=1" >> prj.conf

      - name: Disable sampling of GPS after connection
        ## so device information is published quicker
        run: echo "CONFIG_APP_REQUEST_GPS_ON_INITIAL_SAMPLING=n" >> prj.conf

      - name: Enable debug logs
        run: echo "CONFIG_LOG_MAX_LEVEL=4" >> prj.conf

      - name: Configure the Azure IoT DPS ID scope
        run: |
          sed -i "s/CONFIG_AZURE_IOT_HUB_DPS_ID_SCOPE=\"\"/CONFIG_AZURE_IOT_HUB_DPS_ID_SCOPE=\"${AZURE_IOT_HUB_DPS_ID_SCOPE}\"/" prj.conf

      - name: Set MQTT client ID to test device
        run: |
          echo "CONFIG_CLOUD_CLIENT_ID_USE_CUSTOM=y" >> prj.conf
          echo "CONFIG_CLOUD_CLIENT_ID=\"${{ env.DEVICE_ID }}\"" >> prj.conf

      - run: cat prj.conf
      - run: cat overlay-debug.conf

      - name: Login to GHCR
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.CR_PAT }}

      - name: Pull Docker image
        run: docker pull ${{ needs.docker.outputs.docker-image }}

      - name: Build
        run: |
          docker run --rm -v ${PWD}:/workdir/ncs/firmware ${{ needs.docker.outputs.docker-image }} /bin/bash -c 'cd ncs/firmware && west update && west build -p always -b ${{ matrix.board }} -- -DOVERLAY_CONFIG="overlay-debug.conf;asset-tracker-cloud-firmware-azure.conf" -DEXTRA_CFLAGS="-Werror=format-truncation"'
          cp build/zephyr/merged.hex firmware.hex
          cp prj.conf firmware.conf

      - name: Build with changed version for FOTA test
        run: |
          echo "CONFIG_ASSET_TRACKER_V2_APP_VERSION=\"${APP_VERSION}-upgraded\"" >> prj.conf
          docker run --rm -v ${PWD}:/workdir/ncs/firmware ${{ needs.docker.outputs.docker-image }} /bin/bash -c 'cd ncs/firmware && west update && west build -p always -b ${{ matrix.board }} -- -DOVERLAY_CONFIG="overlay-debug.conf;asset-tracker-cloud-firmware-azure.conf" -DEXTRA_CFLAGS="-Werror=format-truncation"'
          cp build/zephyr/app_update.bin fota-upgrade.bin
          cp prj.conf fota-upgrade.conf

      - uses: actions/upload-artifact@v2
        with:
          name:
            e2e-firmware-${{ matrix.board }}-${{ matrix.network }}-${{
            needs.build-id.outputs.id }}
          path: |
            firmware.hex
            firmware.conf
            fota-upgrade.bin
            fota-upgrade.conf
            overlay-debug.conf

  e2e-device:
    name: Run the firmware for the end-to-end tests on a real device
    runs-on: [self-hosted, firmware-ci]

    needs: [e2e-firmware, e2e-credentials, build-id]

    outputs:
      connected: ${{ steps.device.outputs.connected }}

    strategy:
      matrix:
        board: [nrf9160dk_nrf9160ns]
        network: [ltem]

    steps:
      - uses: actions/download-artifact@v2
        with:
          name:
            e2e-firmware-${{ matrix.board }}-${{ matrix.network }}-${{
            needs.build-id.outputs.id }}

      - uses: actions/download-artifact@v2
        with:
          name:
            e2e-credentials-${{ matrix.board }}-${{ matrix.network }}-${{
            needs.build-id.outputs.id }}
          path:
            e2e-credentials-${{ matrix.board }}-${{ matrix.network }}-${{
            needs.build-id.outputs.id }}

      - name: Set device id
        run: |
          echo "DEVICE_ID=`find e2e-credentials-${{ matrix.board }}-${{ matrix.network }}-${{
            needs.build-id.outputs.id }} -name \*.json | head -n 1 | xargs cat | jq -r '.clientId'`" >> $GITHUB_ENV

      - name: Run firmware on real device
        uses: NordicSemiconductor/cloud-azure-firmware-ci-device-action@saga
        id: device
        env:
          APP_VERSION:
            ${{ github.sha }}-${{ matrix.board }}-${{ matrix.network }}-${{
            env.DEVICE_ID }}
        with:
          device id: ${{ env.DEVICE_ID }}
          app version: ${{ env.APP_VERSION }}
          azure credentials: ${{ secrets.AZURE_CREDENTIALS }}
          azure location: ${{ secrets.LOCATION }}
          azure resource group: ${{ secrets.RESOURCE_GROUP }}
          app name: ${{ secrets.APP_NAME }}
          hex file: firmware.hex
          fota file: fota-upgrade.bin
          abort on: |
            azure_fota: Error (-7) when trying to start firmware download
            azure_iot_integration: azure_iot_hub_init, error
          end on: |
            azure_iot_hub_integration.cloud_wrap_init:  Version:     ${{ env.APP_VERSION }}-upgraded
            "appV"
            "${{ env.APP_VERSION }}-upgraded"
            cloud_module.data_send: Data sent
          timeout in minutes: 20
          sec tag: 11
          certificate location:
            ./e2e-credentials-${{ matrix.board }}-${{ matrix.network }}-${{
            needs.build-id.outputs.id }}
          target: ${{ matrix.board }}
          network: ${{ matrix.network }}

      - uses: actions/upload-artifact@v2
        with:
          name:
            e2e-run-${{ matrix.board }}-${{ matrix.network }}-${{
            needs.build-id.outputs.id }}
          path: |
            device.log
            flash.log
            job.json
            e2e-credentials-${{ matrix.board }}-${{ matrix.network }}-${{
            needs.build-id.outputs.id }}
            firmware.hex
            fota-upgrade.bin

  e2e-tests:
    name: Run the end-to-end test
    runs-on: ubuntu-latest

    needs: [e2e-firmware, e2e-device, build-id]

    if: needs.e2e-device.outputs.connected == 'true'

    strategy:
      matrix:
        board: [nrf9160dk_nrf9160ns]
        network: [ltem]

    steps:
      - uses: actions/download-artifact@v2
        with:
          name:
            e2e-credentials-${{ matrix.board }}-${{ matrix.network }}-${{
            needs.build-id.outputs.id }}
          path:
            e2e-credentials-${{ matrix.board }}-${{ matrix.network }}-${{
            needs.build-id.outputs.id }}

      - uses: actions/download-artifact@v2
        with:
          name:
            e2e-run-${{ matrix.board }}-${{ matrix.network }}-${{
            needs.build-id.outputs.id }}
          path:
            e2e-run-${{ matrix.board }}-${{ matrix.network }}-${{
            needs.build-id.outputs.id }}

      - name: Set device id
        run: |
          echo "DEVICE_ID=`find e2e-credentials-${{ matrix.board }}-${{ matrix.network }}-${{
            needs.build-id.outputs.id }} -name \*.json | head -n 1 | xargs cat | jq -r '.clientId'`" >> $GITHUB_ENV

      - name: Run feature tests
        uses: NordicSemiconductor/cloud-azure-firmware-ci-feature-runner-action@saga
        # For now, ignore test failures until we get more experience running these tests
        continue-on-error: true
        env:
          APP_VERSION:
            ${{ github.sha }}-${{ matrix.board }}-${{ matrix.network }}-${{
            env.DEVICE_ID }}
        with:
          device id: ${{ env.DEVICE_ID }}
          app version: ${{ env.APP_VERSION }}
          azure credentials: ${{ secrets.AZURE_CREDENTIALS }}
          azure location: ${{ secrets.LOCATION }}
          azure resource group: ${{ secrets.RESOURCE_GROUP }}
          app name: ${{ secrets.APP_NAME }}
          feature dir: features
          log dir:
            e2e-run-${{ matrix.board }}-${{ matrix.network }}-${{
            needs.build-id.outputs.id }}
          target: ${{ matrix.board }}
          network: ${{ matrix.network }}

      - name: Remove test device
        # If the device did not connect, no Thing will have been created
        if:
          ${{ !contains(toJSON(github.event.commits.*.message),
          '[skip-cleanup]') }}
        run: |
          echo "Not implemented"

  release:
    name: Release
    runs-on: ubuntu-latest
    if:
      github.ref == 'refs/heads/saga' && (github.event_name == 'push' ||
      github.event_name == 'workflow_dispatch' || github.event_name ==
      'repository_dispatch')

    needs: [build, e2e-tests]

    steps:
      - uses: actions/checkout@v2

      - uses: actions/download-artifact@v2

      - run: npx semantic-release
